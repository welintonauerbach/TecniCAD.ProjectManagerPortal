@*<MatTextField class="@(Class)" @bind-Value="@Text" Label="@Label" Outlined="true">
    </MatTextField>*@
<label>@Label</label>
<input class="form-control @Uppercase()" readonly="@IsReadOnly" placeholder="@PlaceHolder" @bind="@Text"/>

@code {

    [Parameter]
    public string Text
    {
        get => _text;
        set
        {
            if (_text == value) return;

            _text = value;

            TextChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public bool Upercase
    {
        get => upper;
        set
        {
            if (upper == value) return;

            upper = value;
        }
    }

    [Parameter]
    public bool IsReadOnly
    {
        get;
        set;
    }

    [Parameter]
    public bool FullWidth
    {
        get => fullWidth;
        set
        {
            if (fullWidth == value) return;

            fullWidth = value;
        }
    }

    [Parameter]
    public string Class { get; set; }

    private string _text;
    private string _textId;
    bool upper = false;
    bool fullWidth = false;
    static string matSizeString = "mat-layout-grid-cell mat-layout-grid-cell-span-";
    string size = $"{matSizeString}2";

    string sizeValidation()
    {
        if (fullWidth == true)
        {
            return string.Empty;
        }
        else
        {
            return size;
        }
    }



    private string Uppercase()
    {
        if (upper)
            return "text-uppercase";
        else
            return string.Empty;
    }



}
