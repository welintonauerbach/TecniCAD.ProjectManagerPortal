@inherits MatBlazor.Demo.Components.BaseDocComponent

@* THIS FILE IS AUTOGENERATED FROM C# XML Comments! *@
@* ALL MANUAL CHANGES WILL BE REMOVED! *@


@if (!Secondary) {<h3 class="mat-h3">MatToastConfiguration</h3> } else { <h5 class="mat-h5">MatToastConfiguration</h5> }

<p>Represents the global  instance</p>

<div><table class="article-table mat-elevation-z5 mdc-theme--surface">
	<tr>
		<th>Name</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Class</td>
		<td>String</td>
		<td>The main toast class. Defaults to</td>
	</tr>
	<tr>
		<td>CloseIcon</td>
		<td>String</td>
		<td>The css class for the close icon. Defaults to .</td>
	</tr>
	<tr>
		<td>HideStepDuration</td>
		<td>Int32</td>
		<td>Interval between component repaint during the hiding transition. Defaults to 100 ms.</td>
	</tr>
	<tr>
		<td>HideTransitionDuration</td>
		<td>Int32</td>
		<td>How long the hiding transition takes to make a toast disappear. Defaults to 500 ms.</td>
	</tr>
	<tr>
		<td>MaxDisplayedToasts</td>
		<td>Int32</td>
		<td>The maximum number of toasts to be displayed at the same time. Defaults to 5</td>
	</tr>
	<tr>
		<td>MaximumOpacity</td>
		<td>Int32</td>
		<td>The maximum opacity expressed as an integer percentage for a toast in the Visible state. Defaults to 80% where 0 means completely hidden and 100 means solid color.</td>
	</tr>
	<tr>
		<td>NewestOnTop</td>
		<td>Boolean</td>
		<td>Drives the toast display sequence: when true the newest displayable toast will be on top. Otherwise it will be on the bottom. Defaults to true.</td>
	</tr>
	<tr>
		<td>Position</td>
		<td>MatToastPosition</td>
		<td>The css class driving the toast position in the screen. The predefined positions are contained in . Defaults to</td>
	</tr>
	<tr>
		<td>PreventDuplicates</td>
		<td>Boolean</td>
		<td>When true, a new toast with the same type, title and message of an already present toast will be ignored. Defaults to true.</td>
	</tr>
	<tr>
		<td>ProgressBarStepDuration</td>
		<td>Int32</td>
		<td>Interval between component repaint during the Visible state: it&#39;s used only if ShowProgressBar is true. Defaults to 50 ms.</td>
	</tr>
	<tr>
		<td>RequireInteraction</td>
		<td>Boolean</td>
		<td>When true it disables the auto hiding and forces the user to interact with the toast for closing it. Defaults to false.</td>
	</tr>
	<tr>
		<td>ShowCloseButton</td>
		<td>Boolean</td>
		<td>States if the close button has to be used for hiding a toast. The button presence disables the default &quot;hide on click&quot; behaviour. Defaults to true.</td>
	</tr>
	<tr>
		<td>ShowProgressBar</td>
		<td>Boolean</td>
		<td>States if a progressbar has to be shown during the toast Visible state. Defaults to true.</td>
	</tr>
	<tr>
		<td>ShowStepDuration</td>
		<td>Int32</td>
		<td>Interval between component repaint during the showing transition. Defaults to 100 ms.</td>
	</tr>
	<tr>
		<td>ShowTransitionDuration</td>
		<td>Int32</td>
		<td>How long the showing transition takes to bring a toast to the MaximumOpacity and set it to the Visible state. Defaults to 500 ms.</td>
	</tr>
	<tr>
		<td>VisibleStateDuration</td>
		<td>Int32</td>
		<td>How long the toast remain visible without user interaction. Defaults to 5000 ms.</td>
	</tr>
</table></div>
